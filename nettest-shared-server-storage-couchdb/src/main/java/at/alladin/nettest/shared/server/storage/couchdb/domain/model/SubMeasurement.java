/*******************************************************************************
 * Copyright 2019 alladin-IT GmbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

package at.alladin.nettest.shared.server.storage.couchdb.domain.model;

import com.fasterxml.jackson.annotation.JsonClassDescription;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

/**
 * SubMeasurement class that is extended by specific measurements.
 * 
 * @author alladin-IT GmbH (bp@alladin.at)
 * @author alladin-IT GmbH (lb@alladin.at)
 * 
 */
@JsonClassDescription("SubMeasurement class that is extended by specific measurements.")
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        property = "deserialize_type"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = SpeedMeasurement.class, name = "speed_measurement"),
        @JsonSubTypes.Type(value = QoSMeasurement.class, name = "qos_measurement")
})
public class SubMeasurement {
	
	/**
	 * @see SubMeasurementTime
	 */
	@JsonPropertyDescription("This class extends the MeasurementTime class with relative time stamps.")
	@Expose
	@SerializedName("time")
	@JsonProperty("time")
	private SubMeasurementTime measurementTime;
	
	/**
	 * @see MeasurementStatusInfo
	 */
	@JsonPropertyDescription("Describes the status of a measurement.")
	@Expose
	@SerializedName("status_info")
	@JsonProperty("status_info")
	private MeasurementStatusInfo statusInfo;
	
	/**
	 * @see SubMeasurementLmapResult
	 */
	@JsonPropertyDescription("This class holds LMAP specific result values (see LMAP report result model, RFC 8194)")
	@Expose
	@SerializedName("lmap_result")
	@JsonProperty("lmap_result")
	private SubMeasurementLmapResult lmapResult;
	
	/**
	 * Flag to mark a measurement as implausible.
	 */
	@JsonPropertyDescription("Flag to mark a measurement as implausible.")
	@Expose
	@SerializedName("implausible")
	@JsonProperty("implausible")
	private boolean implausible;

	/**
	 * Measurement token generated by the collector.
	 */
	@JsonPropertyDescription("Measurement token generated by the collector.")
	@Expose
	@SerializedName("token")
	@JsonProperty("token")
	private String token;
	
	/**
	 * The protocol version this measurement used, if available.
	 */
	@JsonPropertyDescription("The protocol version this measurement used, if available.")
	@Expose
	@SerializedName("version_protocol")
	@JsonProperty("version_protocol")
	private String versionProtocol;
	
	/**
	 * The library version this measurement used, if available.
	 */
	@JsonPropertyDescription("The library version this measurement used, if available.")
	@Expose
	@SerializedName("version_library")
	@JsonProperty("version_library")
	private String versionLibrary;

	public SubMeasurementTime getMeasurementTime() {
		return measurementTime;
	}

	public void setMeasurementTime(SubMeasurementTime measurementTime) {
		this.measurementTime = measurementTime;
	}

	public MeasurementStatusInfo getStatusInfo() {
		return statusInfo;
	}

	public void setStatusInfo(MeasurementStatusInfo statusInfo) {
		this.statusInfo = statusInfo;
	}

	public SubMeasurementLmapResult getLmapResult() {
		return lmapResult;
	}

	public void setLmapResult(SubMeasurementLmapResult lmapResult) {
		this.lmapResult = lmapResult;
	}

	public boolean isImplausible() {
		return implausible;
	}

	public void setImplausible(boolean implausible) {
		this.implausible = implausible;
	}

	public String getToken() {
		return token;
	}

	public void setToken(String token) {
		this.token = token;
	}

	public String getVersionProtocol() {
		return versionProtocol;
	}

	public void setVersionProtocol(String versionProtocol) {
		this.versionProtocol = versionProtocol;
	}

	public String getVersionLibrary() {
		return versionLibrary;
	}

	public void setVersionLibrary(String versionLibrary) {
		this.versionLibrary = versionLibrary;
	}
}
